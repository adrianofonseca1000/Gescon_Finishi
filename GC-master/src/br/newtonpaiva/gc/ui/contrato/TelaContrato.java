/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.newtonpaiva.gc.ui.contrato;

import br.newtonpaiva.gc.ui.utils.TelaPesquisa;
import br.newtonpaiva.modelo.*;
import br.newtonpaiva.modelo.excessoes.ContratoInvalidoException;
import br.newtonpaiva.modelo.excessoes.TermoAditivoInvalidoException;
import br.newtonpaiva.util.CpfCnpjUtil;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Date;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Adriano
 */
public class TelaContrato extends javax.swing.JDialog {

    /**
     * Creates new form TelaContrato
     */
    private Contrato contrato;
    private Empresa empresaSelecionada;
    private Aluno alunoSelecionado;
    private DefaultTableModel tableModel;
    private DefaultTableModel tableModelAnexoTermo;
    private DefaultTableModel tableModelTermo;
    private DefaultTableModel tableModelHistorico;
    private TermoAditivo termo;
    private List<TermoAditivo> termos;
    private List<Documento> documentos;

    public TelaContrato(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        ImageIcon imagemTituloJanela = new ImageIcon(getClass().getResource("/LogoPequena.jpg"));
        setIconImage(imagemTituloJanela.getImage());
        setLocationRelativeTo(parent);
        lblNomeAluno.setText("");
        lblNomeEmpresa.setText("");
        inicializarTabela();
        this.setResizable(false);
        contrato = new Contrato();
        tabPanelGeral.setSelectedIndex(0);

    }

    private void inicializarTabela() {
        tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableModel.addColumn("ID");
        tableModel.addColumn("Nome do Arquivo");

        //tableModel.addRow(new String[] {"1", "C:/teste.txt"});
        tblResultadoAnexo.setModel(tableModel);
    }

    private void inicializarTabelaTermo() {

        tableModelTermo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableModelTermo.addColumn("ID");
        tableModelTermo.addColumn("Data Termo");
        tableModelTermo.addColumn("Data Início");
        tableModelTermo.addColumn("Data Término");

        tblResultadoAditivo.setModel(tableModelTermo);
    }

    private void inicializarTabelaAnexoTermo() {

        tableModelAnexoTermo = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableModelAnexoTermo.addColumn("ID");
        tableModelAnexoTermo.addColumn("Nome do Arquivo");

        tblResultadoAnexoTermo.setModel(tableModelAnexoTermo);

    }

    private void inicializarTabelaHistorico() {
        tableModelHistorico = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        tableModelHistorico.addColumn("Data");
        tableModelHistorico.addColumn("Situação");
        tableModelHistorico.addColumn("Observação");
        tblResultadoHistorico.setModel(tableModelHistorico);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPanelGeral = new javax.swing.JTabbedPane();
        jPanel6 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblRA = new javax.swing.JLabel();
        txtRA = new javax.swing.JTextField();
        btnPesquisaAluno = new javax.swing.JButton();
        lblNomeAluno = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        lblCNPJ = new javax.swing.JLabel();
        btnPesquisaEmpresa = new javax.swing.JButton();
        lblNomeEmpresa = new javax.swing.JLabel();
        txtCNPJEmpresa = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtProtocolo = new javax.swing.JFormattedTextField();
        txtDataEntrada = new javax.swing.JFormattedTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDataInicio = new javax.swing.JFormattedTextField();
        txtDataTermino = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cbxSituacao = new javax.swing.JComboBox<>();
        cbxTipoContrato = new javax.swing.JComboBox<>();
        lblCHDiaria = new javax.swing.JLabel();
        lblCHSemanal = new javax.swing.JLabel();
        lblBolsa = new javax.swing.JLabel();
        lblAuxTranporte = new javax.swing.JLabel();
        txtValorBolsa = new javax.swing.JFormattedTextField();
        txtAuxTransporte = new javax.swing.JFormattedTextField();
        txtCHDiaria = new javax.swing.JSpinner();
        jLabel9 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtDataRescisao = new javax.swing.JFormattedTextField();
        txtCHSemanal = new javax.swing.JSpinner();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtObservacao = new javax.swing.JTextArea();
        jPanel5 = new javax.swing.JPanel();
        btnLimparContrato = new javax.swing.JButton();
        btnConsultarContrato = new javax.swing.JButton();
        btnSalvar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnReativar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblResultadoAnexo = new javax.swing.JTable();
        btnBaixarAnexo = new javax.swing.JButton();
        btnAddAnexo = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblResultadoHistorico = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        tabPanel = new javax.swing.JTabbedPane();
        tblLista = new javax.swing.JPanel();
        JScroll1 = new javax.swing.JScrollPane();
        tblResultadoAditivo = new javax.swing.JTable();
        jPanel10 = new javax.swing.JPanel();
        btnExcluirTermo = new javax.swing.JButton();
        btnSelecionarTermo = new javax.swing.JButton();
        tblDados = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        txtDataTermo = new javax.swing.JFormattedTextField();
        txtDataInicioTermo = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        txtDataTerminoTermo = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtObservacaoTermo = new javax.swing.JTextArea();
        jPanel9 = new javax.swing.JPanel();
        btnLimparTermo = new javax.swing.JButton();
        btnSalvarTermo = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tblResultadoAnexoTermo = new javax.swing.JTable();
        btnAddAnexoTermo = new javax.swing.JButton();
        btnBaixarAnexoTermo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Contrato");

        tabPanelGeral.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tabPanelGeralStateChanged(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Aluno"));

        lblRA.setText("RA");

        txtRA.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtRAFocusLost(evt);
            }
        });

        btnPesquisaAluno.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lookup.png"))); // NOI18N
        btnPesquisaAluno.setToolTipText("");
        btnPesquisaAluno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaAlunoActionPerformed(evt);
            }
        });

        lblNomeAluno.setText("Rafael Augusto Nunes Silva");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblRA)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(txtRA, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPesquisaAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblNomeAluno)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnPesquisaAluno, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblRA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtRA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblNomeAluno))
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados da Empresa"));

        lblCNPJ.setText("CNPJ");

        btnPesquisaEmpresa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lookup.png"))); // NOI18N
        btnPesquisaEmpresa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaEmpresaActionPerformed(evt);
            }
        });

        lblNomeEmpresa.setText("UNIMED");

        txtCNPJEmpresa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtCNPJEmpresaFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(2, 2, 2)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblCNPJ)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(txtCNPJEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPesquisaEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblNomeEmpresa)))
                .addContainerGap(248, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblCNPJ)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtCNPJEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnPesquisaEmpresa, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblNomeEmpresa))
                .addContainerGap())
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados do Contrato"));

        jLabel1.setText("Nº Protocolo");

        jLabel2.setText("Data Entrada");

        txtProtocolo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProtocoloActionPerformed(evt);
            }
        });

        txtDataEntrada.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtDataEntrada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataEntradaActionPerformed(evt);
            }
        });

        jLabel3.setText("Data Início");

        txtDataInicio.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtDataInicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataInicioActionPerformed(evt);
            }
        });

        txtDataTermino.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtDataTermino.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataTerminoActionPerformed(evt);
            }
        });

        jLabel4.setText("Data Término");

        jLabel5.setText("Situação");

        jLabel6.setText("Tipo Contrato");

        cbxSituacao.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Em andamento", "Cancelado", "Finalizado" }));
        cbxSituacao.setEnabled(false);
        cbxSituacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxSituacaoActionPerformed(evt);
            }
        });

        cbxTipoContrato.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "<<Selecione...>>", "Obrigatório", "Não obrigatório", "Atividade extensionista", "Monitoria", "Escola integrada", "Iniciação ciêntifica" }));

        lblCHDiaria.setText("Carga Horária Diária");

        lblCHSemanal.setText("Carga Horária Semanal");

        lblBolsa.setText("Valor Bolsa");

        lblAuxTranporte.setText("Aux. Transporte");

        txtValorBolsa.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtValorBolsa.setText("0,00");
        txtValorBolsa.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtValorBolsaFocusLost(evt);
            }
        });
        txtValorBolsa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtValorBolsaActionPerformed(evt);
            }
        });

        txtAuxTransporte.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#,##0.00"))));
        txtAuxTransporte.setText("0,00");
        txtAuxTransporte.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtAuxTransporteFocusLost(evt);
            }
        });
        txtAuxTransporte.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAuxTransporteActionPerformed(evt);
            }
        });

        jLabel9.setText("Observação");

        jLabel7.setText("Data Término");

        txtDataRescisao.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtDataRescisao.setEnabled(false);
        txtDataRescisao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataRescisaoActionPerformed(evt);
            }
        });

        txtObservacao.setColumns(20);
        txtObservacao.setRows(5);
        jScrollPane1.setViewportView(txtObservacao);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtValorBolsa, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblBolsa))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtAuxTransporte, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblAuxTranporte))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(cbxSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataRescisao, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtProtocolo, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDataEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtDataTermino, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(53, 53, 53)
                                .addComponent(jLabel4)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(cbxTipoContrato, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCHDiaria, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCHDiaria))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtCHSemanal, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCHSemanal))))
                .addGap(302, 302, 302))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtProtocolo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataEntrada, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDataTermino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbxTipoContrato, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblCHDiaria)
                            .addComponent(lblCHSemanal))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCHDiaria, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCHSemanal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(lblBolsa)
                        .addComponent(lblAuxTranporte)
                        .addComponent(jLabel5))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(jLabel7)))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtValorBolsa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtAuxTransporte, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cbxSituacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtDataRescisao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(19, 19, 19))
        );

        btnLimparContrato.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clear.png"))); // NOI18N
        btnLimparContrato.setText("Limpar");
        btnLimparContrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparContratoActionPerformed(evt);
            }
        });

        btnConsultarContrato.setIcon(new javax.swing.ImageIcon(getClass().getResource("/lookup.png"))); // NOI18N
        btnConsultarContrato.setText("Consultar");
        btnConsultarContrato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultarContratoActionPerformed(evt);
            }
        });

        btnSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        btnSalvar.setText("Salvar");
        btnSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarActionPerformed(evt);
            }
        });

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/red_flag.png"))); // NOI18N
        btnCancelar.setText("Rescindir");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        btnReativar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/yellow_flag.png"))); // NOI18N
        btnReativar.setText("Reativar");
        btnReativar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReativarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(btnLimparContrato)
                .addGap(5, 5, 5)
                .addComponent(btnConsultarContrato)
                .addGap(5, 5, 5)
                .addComponent(btnSalvar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnCancelar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReativar)
                .addGap(20, 20, 20))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimparContrato)
                    .addComponent(btnConsultarContrato)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSalvar)
                        .addComponent(btnCancelar)
                        .addComponent(btnReativar)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Anexos"));

        tblResultadoAnexo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "Contrato Versão1.pdf"},
                {"", "Imagem.jpeg"},
                {null, "Contv2.pdf"},
                {null, "TesteErrado.doc"}
            },
            new String [] {
                "ID", "Nome do Arquivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblResultadoAnexo);

        btnBaixarAnexo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/download.png"))); // NOI18N
        btnBaixarAnexo.setText("Baixar Anexo");
        btnBaixarAnexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBaixarAnexoActionPerformed(evt);
            }
        });

        btnAddAnexo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attach.png"))); // NOI18N
        btnAddAnexo.setText("Adicionar Anexo");
        btnAddAnexo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAnexoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(btnAddAnexo)
                        .addGap(5, 5, 5)
                        .addComponent(btnBaixarAnexo))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 952, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddAnexo)
                    .addComponent(btnBaixarAnexo)))
        );

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(59, Short.MAX_VALUE))
        );

        jPanel4.getAccessibleContext().setAccessibleDescription("");

        tabPanelGeral.addTab("Dados do Contrato", jPanel6);

        tblResultadoHistorico.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "Contrato Versão1.pdf"},
                {"", "Imagem.jpeg"},
                {null, "Contv2.pdf"},
                {null, "TesteErrado.doc"}
            },
            new String [] {
                "ID", "Nome do Arquivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblResultadoHistorico);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 984, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 535, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(72, Short.MAX_VALUE))
        );

        tabPanelGeral.addTab("Histórico do Contrato", jPanel7);

        tblResultadoAditivo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "Contrato Versão1.pdf"},
                {"", "Imagem.jpeg"},
                {null, "Contv2.pdf"},
                {null, "TesteErrado.doc"}
            },
            new String [] {
                "ID", "Nome do Arquivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        JScroll1.setViewportView(tblResultadoAditivo);

        btnExcluirTermo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/del.png"))); // NOI18N
        btnExcluirTermo.setText("Excluir");
        btnExcluirTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirTermoActionPerformed(evt);
            }
        });

        btnSelecionarTermo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ok-mini.png"))); // NOI18N
        btnSelecionarTermo.setText("Selecionar");
        btnSelecionarTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelecionarTermoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnExcluirTermo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelecionarTermo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExcluirTermo)
                    .addComponent(btnSelecionarTermo))
                .addContainerGap())
        );

        javax.swing.GroupLayout tblListaLayout = new javax.swing.GroupLayout(tblLista);
        tblLista.setLayout(tblListaLayout);
        tblListaLayout.setHorizontalGroup(
            tblListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tblListaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tblListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(JScroll1, javax.swing.GroupLayout.DEFAULT_SIZE, 959, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tblListaLayout.setVerticalGroup(
            tblListaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, tblListaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(JScroll1, javax.swing.GroupLayout.PREFERRED_SIZE, 408, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(117, Short.MAX_VALUE))
        );

        tabPanel.addTab("Lista de Termos", tblLista);

        jLabel8.setText("Data do Termo");

        txtDataTermo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtDataTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataTermoActionPerformed(evt);
            }
        });

        txtDataInicioTermo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtDataInicioTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataInicioTermoActionPerformed(evt);
            }
        });

        jLabel10.setText("Data de Início");

        txtDataTerminoTermo.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        txtDataTerminoTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDataTerminoTermoActionPerformed(evt);
            }
        });

        jLabel11.setText("Data de Término");

        jLabel12.setText("Observação");

        txtObservacaoTermo.setColumns(20);
        txtObservacaoTermo.setRows(5);
        jScrollPane4.setViewportView(txtObservacaoTermo);

        btnLimparTermo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clear.png"))); // NOI18N
        btnLimparTermo.setText("Limpar");
        btnLimparTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparTermoActionPerformed(evt);
            }
        });

        btnSalvarTermo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/save.png"))); // NOI18N
        btnSalvarTermo.setText("Salvar");
        btnSalvarTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalvarTermoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnLimparTermo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSalvarTermo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel9Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSalvarTermo)
                    .addComponent(btnLimparTermo))
                .addContainerGap())
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Anexos"));
        jPanel11.setName(""); // NOI18N

        tblResultadoAnexoTermo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", "Contrato Versão1.pdf"},
                {"", "Imagem.jpeg"},
                {null, "Contv2.pdf"},
                {null, "TesteErrado.doc"}
            },
            new String [] {
                "ID", "Nome do Arquivo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(tblResultadoAnexoTermo);

        btnAddAnexoTermo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/attach.png"))); // NOI18N
        btnAddAnexoTermo.setText("Adicionar Anexo");
        btnAddAnexoTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddAnexoTermoActionPerformed(evt);
            }
        });

        btnBaixarAnexoTermo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/download.png"))); // NOI18N
        btnBaixarAnexoTermo.setText("Baixar Anexo");
        btnBaixarAnexoTermo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBaixarAnexoTermoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddAnexoTermo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnBaixarAnexoTermo)
                .addContainerGap())
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel11Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane5)
                    .addContainerGap()))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(236, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddAnexoTermo)
                    .addComponent(btnBaixarAnexoTermo))
                .addContainerGap())
            .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel11Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(51, Short.MAX_VALUE)))
        );

        jScrollPane5.getAccessibleContext().setAccessibleName("");

        javax.swing.GroupLayout tblDadosLayout = new javax.swing.GroupLayout(tblDados);
        tblDados.setLayout(tblDadosLayout);
        tblDadosLayout.setHorizontalGroup(
            tblDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tblDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tblDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(tblDadosLayout.createSequentialGroup()
                        .addGroup(tblDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(tblDadosLayout.createSequentialGroup()
                                .addGroup(tblDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(txtDataTermo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(tblDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel10)
                                    .addComponent(txtDataInicioTermo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(tblDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel11)
                                    .addComponent(txtDataTerminoTermo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel12))
                        .addGap(0, 651, Short.MAX_VALUE))
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        tblDadosLayout.setVerticalGroup(
            tblDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tblDadosLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tblDadosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(tblDadosLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataTerminoTermo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tblDadosLayout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataInicioTermo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(tblDadosLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtDataTermo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );

        jPanel11.getAccessibleContext().setAccessibleDescription("");

        tabPanel.addTab("Dados do Termo", tblDados);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPanel)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 629, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tabPanelGeral.addTab("Termo Aditivo", jPanel8);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tabPanelGeral)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabPanelGeral, javax.swing.GroupLayout.PREFERRED_SIZE, 646, Short.MAX_VALUE)
        );

        tabPanelGeral.getAccessibleContext().setAccessibleName("Histórico do Contrato");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPesquisaAlunoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaAlunoActionPerformed

        TelaPesquisa tela = new TelaPesquisa(
                (JFrame) this.getParent(), true);
        tela.setTitle("Pesquisa de Aluno");
        tela.getCbxTipoFiltro().removeAllItems();
        tela.getCbxTipoFiltro().addItem("Id");
        tela.getCbxTipoFiltro().addItem("RA");
        tela.getCbxTipoFiltro().addItem("Aluno");

        tela.getTableModel().addColumn("ID");
        tela.getTableModel().addColumn("RA");
        tela.getTableModel().addColumn("Aluno");

        tela.getBtnConsultar().addActionListener(
                new AcaoPesquisaAluno(tela.getTxtFiltro(), tela.getCbxTipoFiltro(), tela.getTableModel()));

        tela.getBtnSelecionar().addActionListener(
                new AcaoSelecionarAluno(tela.getTblResultadoPesquisa(), tela));

        if (this.cbxSituacao.getSelectedIndex() == 0) {
            tela.getBtnSelecionar().setEnabled(true);
        } else {
            tela.getBtnSelecionar().setEnabled(false);
        }
        tela.setVisible(true);
    }//GEN-LAST:event_btnPesquisaAlunoActionPerformed

    private class AcaoPesquisaAluno implements ActionListener {

        private JTextField filtro;
        private JComboBox<String> tipoFiltro;
        private DefaultTableModel tabela;
        private List<Aluno> alunos;
        private Aluno aluno;

        public AcaoPesquisaAluno(JTextField filtro, JComboBox<String> tipoFiltro, DefaultTableModel tabela) {
            this.filtro = filtro;
            this.tipoFiltro = tipoFiltro;
            this.tabela = tabela;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                if (tipoFiltro.getSelectedIndex() == 1) {

                    String ra = filtro.getText();
                    aluno = Aluno.buscarPorRA(ra);
                    if (aluno == null) {
                        JOptionPane.showMessageDialog(null, "Aluno não encontrado");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        tabela.addRow(
                                new String[]{aluno.getId().toString(), aluno.getRa(), aluno.getNome()});
                    }

                } else if (tipoFiltro.getSelectedIndex() == 2) {
                    String nome = filtro.getText();
                    alunos = Aluno.buscarPorNome(nome);
                    if (alunos == null) {
                        JOptionPane.showMessageDialog(null, "Aluno não encontrado");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        for (Aluno i : alunos) {
                            tabela.addRow(
                                    new String[]{i.getId().toString(), i.getRa(), i.getNome()});
                        }
                    }

                } else if (tipoFiltro.getSelectedIndex() == 0) {
                    Integer id = Integer.parseInt(filtro.getText());
                    aluno = Aluno.buscarPorId(id);
                    if (aluno == null) {
                        JOptionPane.showMessageDialog(null, "Aluno não encontrado");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        tabela.addRow(
                                new String[]{aluno.getId().toString(), aluno.getRa(), aluno.getNome()});
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class AcaoSelecionarAluno implements ActionListener {

        private JTable tabela;
        private TelaPesquisa tela;

        public AcaoSelecionarAluno(JTable tabela, TelaPesquisa tela) {
            this.tabela = tabela;
            this.tela = tela;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int selecionada = tabela.getSelectedRow();
            if (selecionada == -1) {
                JOptionPane.showMessageDialog(null, "Nenhum registro selecionado");
            } else {
                int id = Integer.parseInt(tabela.getValueAt(selecionada, 0).toString());
                try {
                    alunoSelecionado = Aluno.buscarPorId(id);
                    if (alunoSelecionado == null) {
                        JOptionPane.showMessageDialog(null, "Aluno não encontrado, faça a consulta novamente.");
                    } else {
                        txtRA.setText(alunoSelecionado.getRa());
                        lblNomeAluno.setText(alunoSelecionado.getNome());
                        tela.setVisible(false);
                        txtCNPJEmpresa.requestFocus();
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Erro! Favor entrar em contato com o Administrador do sistema.");
                }
            }
        }
    }

    private void btnAddAnexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAnexoActionPerformed

        if ((contrato == null) || (contrato.getId() == null)) {
            JOptionPane.showMessageDialog(this, "Nenhum contrato selecionado!");
        } else {
            JFileChooser tela = new JFileChooser();
            int retorno = tela.showOpenDialog(this);

            if (retorno == JFileChooser.APPROVE_OPTION) {
                File arquivo = tela.getSelectedFile();
                //JOptionPane.showMessageDialog(null, arquivo.getAbsolutePath());
                try {
                    int id = contrato.anexarDocumento(arquivo.getAbsolutePath());
                    tableModel.addRow(
                            new String[]{String.valueOf(id), arquivo.getName()});
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Não foi possível encontrar o arquivo!");
                } catch (SQLException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Erro ao inserir o arquivo no banco de dados!");
                }
            }

        }
    }//GEN-LAST:event_btnAddAnexoActionPerformed

    private void btnBaixarAnexoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBaixarAnexoActionPerformed
        int selecionada = tblResultadoAnexo.getSelectedRow();
        if (selecionada == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum registro selecionado");
        } else {
            JFileChooser tela = new JFileChooser();
            tela.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int retorno = tela.showSaveDialog(this);

            if (retorno == JFileChooser.APPROVE_OPTION) {
                File arquivo = tela.getSelectedFile();
                //JOptionPane.showMessageDialog(null, arquivo.getAbsolutePath() + "\\" + tblResultadoAnexo.getValueAt(selecionada, 1).toString());
                int id = Integer.parseInt(tblResultadoAnexo.getValueAt(selecionada, 0).toString());
                try {
                    Contrato.baixarDocumento(id, arquivo.getAbsolutePath() + "\\" + tblResultadoAnexo.getValueAt(selecionada, 1).toString());
                } catch (SQLException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Erro ao baixar o arquivo do banco de dados! Favor entrar em contato com o Administrador do sistema.");
                } catch (IOException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Erro localizar o caminho do arquivo!");
                }
            }
        }
    }//GEN-LAST:event_btnBaixarAnexoActionPerformed

    private void txtRAFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtRAFocusLost
        String ra = txtRA.getText();
        if (!ra.isEmpty()) {

            try {
                alunoSelecionado = Aluno.buscarPorRA(ra);
                if (alunoSelecionado == null) {
                    JOptionPane.showMessageDialog(null, "Aluno não encontrada");
                    txtRA.setText("");
                    lblNomeAluno.setText("");
                    txtRA.requestFocus();
                } else {
                    lblNomeAluno.setText(alunoSelecionado.getNome());
                }

            } catch (SQLException ex) {
                Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Erro! Favor entrar em contato com o Administrador do sistema.");
            }

        }
    }//GEN-LAST:event_txtRAFocusLost

    private void btnPesquisaEmpresaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaEmpresaActionPerformed

        TelaPesquisa tela = new TelaPesquisa(
                (JFrame) this.getParent(), true);
        tela.setTitle("Pesquisa de Empresa");
        tela.getCbxTipoFiltro().removeAllItems();
        tela.getCbxTipoFiltro().addItem("Id");
        tela.getCbxTipoFiltro().addItem("Razão Social");
        tela.getCbxTipoFiltro().addItem("CNPJ");

        tela.getTableModel().addColumn("ID");
        tela.getTableModel().addColumn("CNPJ");
        tela.getTableModel().addColumn("Razão Social");

        tela.getBtnConsultar().addActionListener(
                new AcaoPesquisaEmpresa(tela.getTxtFiltro(), tela.getCbxTipoFiltro(), tela.getTableModel()));

        tela.getBtnSelecionar().addActionListener(
                new AcaoSelecionarEmpresa(tela.getTblResultadoPesquisa(), tela));

        tela.getBtnCadastro().addActionListener(
                new AcaoCadastrarEmpresa(tela));

        if (this.cbxSituacao.getSelectedIndex() == 0) {
            tela.getBtnSelecionar().setEnabled(true);
        } else {
            tela.getBtnSelecionar().setEnabled(false);
        }

        tela.setVisible(true);

    }//GEN-LAST:event_btnPesquisaEmpresaActionPerformed
    private class AcaoCadastrarEmpresa implements ActionListener {

        private TelaPesquisa tela;

        public AcaoCadastrarEmpresa(TelaPesquisa tela) {
            this.tela = tela;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
//            TelaEmpresa telaCadastro = new TelaEmpresa(
//                    (JFrame) this.tela.getParent(), true);
//            telaCadastro.setVisible(true);
        }
    }

    private class AcaoPesquisaEmpresa implements ActionListener {

        private JTextField filtro;
        private JComboBox<String> tipoFiltro;
        private DefaultTableModel tabela;
        private List<Empresa> empresas;
        private Empresa empresa;

        public AcaoPesquisaEmpresa(JTextField filtro, JComboBox<String> tipoFiltro, DefaultTableModel tabela) {
            this.filtro = filtro;
            this.tipoFiltro = tipoFiltro;
            this.tabela = tabela;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                if (tipoFiltro.getSelectedIndex() == 2) {

                    String cnpj = filtro.getText();
                    empresa = Empresa.buscarPorCNPJ(cnpj);
                    if (empresa == null) {
                        JOptionPane.showMessageDialog(null, "Empresa não encontrada");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        tabela.addRow(
                                new String[]{empresa.getId().toString(), empresa.getNome(), empresa.getCnpj()});
                    }

                } else if (tipoFiltro.getSelectedIndex() == 1) {
                    String nome = filtro.getText();
                    empresas = Empresa.buscarPorNome(nome);
                    if (empresas == null) {
                        JOptionPane.showMessageDialog(null, "Empresa não encontrada");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        for (Empresa i : empresas) {
                            tabela.addRow(
                                    new String[]{i.getId().toString(), i.getNome(), i.getCnpj()});
                        }
                    }

                } else if (tipoFiltro.getSelectedIndex() == 0) {
                    Integer id = Integer.parseInt(filtro.getText());
                    empresa = Empresa.buscarPorId(id);
                    if (empresa == null) {
                        JOptionPane.showMessageDialog(null, "Empresa não encontrada");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        tabela.addRow(
                                new String[]{empresa.getId().toString(), empresa.getNome(), empresa.getCnpj()});
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class AcaoSelecionarEmpresa implements ActionListener {

        private JTable tabela;
        private TelaPesquisa tela;

        public AcaoSelecionarEmpresa(JTable tabela, TelaPesquisa tela) {
            this.tabela = tabela;
            this.tela = tela;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int selecionada = tabela.getSelectedRow();
            if (selecionada == -1) {
                JOptionPane.showMessageDialog(null, "Nenhum registro selecionado");
            } else {
                int id = Integer.parseInt(tabela.getValueAt(selecionada, 0).toString());
                try {
                    empresaSelecionada = Empresa.buscarPorId(id);
                    if (empresaSelecionada == null) {
                        JOptionPane.showMessageDialog(null, "Empresa não encontrada, faça a consulta novamente.");
                    } else {
                        txtCNPJEmpresa.setText(CpfCnpjUtil.formatarCpfCnpj(empresaSelecionada.getCnpj()));
                        lblNomeEmpresa.setText(empresaSelecionada.getNome());
                        tela.setVisible(false);
                        txtProtocolo.requestFocus();
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Erro! Favor entrar em contato com o Administrador do sistema.");
                }
            }
        }
    }

    private void btnLimparContratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparContratoActionPerformed
        txtRA.setText("");
        txtCNPJEmpresa.setText("");
        txtProtocolo.setText("");
        txtDataEntrada.setText("");
        txtDataInicio.setText("");
        txtDataTermino.setText("");
        cbxTipoContrato.setSelectedIndex(0);
        cbxSituacao.setSelectedIndex(0);
        txtCHDiaria.setValue(0);
        txtCHSemanal.setValue(0);
        txtValorBolsa.setText("0,00");
        txtAuxTransporte.setText("0,00");
        txtObservacao.setText("");
        inicializarTabela();
        alunoSelecionado = null;
        empresaSelecionada = null;
        contrato = new Contrato();
        lblNomeAluno.setText("");
        lblNomeEmpresa.setText("");
        txtRA.requestFocus();
        validaBotoes(cbxSituacao.getSelectedIndex());
    }//GEN-LAST:event_btnLimparContratoActionPerformed

    private void txtAuxTransporteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAuxTransporteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAuxTransporteActionPerformed

    private void txtValorBolsaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtValorBolsaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtValorBolsaActionPerformed

    private void cbxSituacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxSituacaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cbxSituacaoActionPerformed

    private void txtDataTerminoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataTerminoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataTerminoActionPerformed

    private void txtDataInicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataInicioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataInicioActionPerformed

    private void txtDataEntradaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataEntradaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataEntradaActionPerformed

    private void txtProtocoloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProtocoloActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProtocoloActionPerformed

    private void btnConsultarContratoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultarContratoActionPerformed
        TelaPesquisa tela = new TelaPesquisa(
                (JFrame) this.getParent(), true);
        tela.setTitle("Pesquisa de Contrato");
        tela.getCbxTipoFiltro().removeAllItems();
        tela.getCbxTipoFiltro().addItem("Id");
        tela.getCbxTipoFiltro().addItem("Número Protocolo");
        tela.getCbxTipoFiltro().addItem("Nome Empresa");
        tela.getCbxTipoFiltro().addItem("CNPJ Empresa");
        tela.getCbxTipoFiltro().addItem("RA Aluno");
        tela.getCbxTipoFiltro().addItem("Nome Aluno");

        tela.getTableModel().addColumn("ID");
        tela.getTableModel().addColumn("Número Protocolo");
        tela.getTableModel().addColumn("Data Inicio");
        tela.getTableModel().addColumn("Data Término");
        tela.getTableModel().addColumn("Nome Aluno");
        tela.getTableModel().addColumn("Nome Empresa");

        tela.getBtnConsultar().addActionListener(
                new AcaoPesquisaContrato(tela.getTxtFiltro(), tela.getCbxTipoFiltro(), tela.getTableModel()));

        tela.getBtnSelecionar().addActionListener(
                new AcaoSelecionarContrato(tela.getTblResultadoPesquisa(), tela));

        tela.getBtnCadastro().setVisible(false);

        tela.setVisible(true);
    }//GEN-LAST:event_btnConsultarContratoActionPerformed

    private class AcaoPesquisaContrato implements ActionListener {

        private JTextField filtro;
        private JComboBox<String> tipoFiltro;
        private DefaultTableModel tabela;
        private List<Contrato> contratos;
        private Contrato contrato;

        public AcaoPesquisaContrato(JTextField filtro, JComboBox<String> tipoFiltro, DefaultTableModel tabela) {
            this.filtro = filtro;
            this.tipoFiltro = tipoFiltro;
            this.tabela = tabela;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            try {
                if (tipoFiltro.getSelectedIndex() == 1) {
                    String nome = filtro.getText();
                    contratos = Contrato.buscarGeral("a.NUM_PROTOCOLO", nome);
                    if ((contratos == null) || (contratos.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Contrato não encontrado");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        for (Contrato i : contratos) {
                            String dataInicio = "";
                            SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                            if (i.getDataInicio() != null && !i.getDataInicio().toString().isEmpty()) {
                                dataInicio = format1.format(i.getDataInicio().getTime());
                            }

                            String dataFinal = "";
                            if (i.getDataTermino() != null && !i.getDataTermino().toString().isEmpty()) {
                                dataFinal = format1.format(i.getDataTermino().getTime());
                            }

                            tabela.addRow(
                                    new String[]{i.getId().toString(), i.getNumProtocolo(), dataInicio, dataFinal,
                                        i.getAluno().getNome(), i.getEmpresa().getNome()});
                        }
                    }

                } else if (tipoFiltro.getSelectedIndex() == 2) {
                    String nome = filtro.getText();
                    contratos = Contrato.buscarGeral("c.NOM_EMPRESA", nome);
                    if ((contratos == null) || (contratos.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Contrato não encontrado");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        for (Contrato i : contratos) {
                            String dataInicio = "";
                            SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                            if (i.getDataInicio() != null && !i.getDataInicio().toString().isEmpty()) {
                                dataInicio = format1.format(i.getDataInicio().getTime());
                            }

                            String dataFinal = "";
                            if (i.getDataTermino() != null && !i.getDataTermino().toString().isEmpty()) {
                                dataFinal = format1.format(i.getDataTermino().getTime());
                            }

                            tabela.addRow(
                                    new String[]{i.getId().toString(), i.getNumProtocolo(), dataInicio, dataFinal,
                                        i.getAluno().getNome(), i.getEmpresa().getNome()});
                        }
                    }

                } else if (tipoFiltro.getSelectedIndex() == 3) {
                    String nome = filtro.getText();
                    contratos = Contrato.buscarGeral("c.NUM_CNPJ", nome);
                    if ((contratos == null) || (contratos.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Contrato não encontrado");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        for (Contrato i : contratos) {
                            String dataInicio = "";
                            SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                            if (i.getDataInicio() != null && !i.getDataInicio().toString().isEmpty()) {
                                dataInicio = format1.format(i.getDataInicio().getTime());
                            }

                            String dataFinal = "";
                            if (i.getDataTermino() != null && !i.getDataTermino().toString().isEmpty()) {
                                dataFinal = format1.format(i.getDataTermino().getTime());
                            }

                            tabela.addRow(
                                    new String[]{i.getId().toString(), i.getNumProtocolo(), dataInicio, dataFinal,
                                        i.getAluno().getNome(), i.getEmpresa().getNome()});
                        }
                    }

                } else if (tipoFiltro.getSelectedIndex() == 4) {
                    String nome = filtro.getText();
                    contratos = Contrato.buscarGeral("b.NUM_RA", nome);
                    if ((contratos == null) || (contratos.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Contrato não encontrado");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        for (Contrato i : contratos) {
                            String dataInicio = "";
                            SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                            if (i.getDataInicio() != null && !i.getDataInicio().toString().isEmpty()) {
                                dataInicio = format1.format(i.getDataInicio().getTime());
                            }

                            String dataFinal = "";
                            if (i.getDataTermino() != null && !i.getDataTermino().toString().isEmpty()) {
                                dataFinal = format1.format(i.getDataTermino().getTime());
                            }

                            tabela.addRow(
                                    new String[]{i.getId().toString(), i.getNumProtocolo(), dataInicio, dataFinal,
                                        i.getAluno().getNome(), i.getEmpresa().getNome()});
                        }
                    }

                } else if (tipoFiltro.getSelectedIndex() == 5) {
                    String nome = filtro.getText();
                    contratos = Contrato.buscarGeral("b.NOM_ALUNO", nome);
                    if ((contratos == null) || (contratos.isEmpty())) {
                        JOptionPane.showMessageDialog(null, "Contrato não encontrado");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        for (Contrato i : contratos) {
                            String dataInicio = "";
                            SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                            if (i.getDataInicio() != null && !i.getDataInicio().toString().isEmpty()) {
                                dataInicio = format1.format(i.getDataInicio().getTime());
                            }

                            String dataFinal = "";
                            if (i.getDataTermino() != null && i.getDataInicio() != null && !i.getDataTermino().toString().isEmpty()) {
                                dataFinal = format1.format(i.getDataTermino().getTime());
                            }

                            tabela.addRow(
                                    new String[]{i.getId().toString(), i.getNumProtocolo(), dataInicio, dataFinal,
                                        i.getAluno().getNome(), i.getEmpresa().getNome()});
                        }
                    }

                } else if (tipoFiltro.getSelectedIndex() == 0) {
                    Integer id = Integer.parseInt(filtro.getText());
                    this.contrato = Contrato.buscarPorId(id);
                    if (this.contrato == null) {
                        JOptionPane.showMessageDialog(null, "Contrato não encontrado");
                        this.filtro.setText("");
                        this.filtro.requestFocus();
                        tabela.setRowCount(0);
                    } else {
                        tabela.setRowCount(0);
                        String dataInicio = "";
                        SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                        if (this.contrato.getDataInicio() != null && !this.contrato.getDataInicio().toString().isEmpty()) {
                            dataInicio = format1.format(this.contrato.getDataInicio().getTime());
                        }

                        String dataFinal = "";
                        if (this.contrato.getDataTermino() != null && !this.contrato.getDataTermino().toString().isEmpty()) {
                            dataFinal = format1.format(this.contrato.getDataTermino().getTime());
                        }

                        tabela.addRow(
                                new String[]{this.contrato.getId().toString(), this.contrato.getNumProtocolo(), dataInicio, dataFinal,
                                    this.contrato.getAluno().getNome(), this.contrato.getEmpresa().getNome()});
                    }

                }
            } catch (SQLException ex) {
                Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private class AcaoSelecionarContrato implements ActionListener {

        private JTable tabela;
        private TelaPesquisa tela;
        List<Documento> documentos;

        public AcaoSelecionarContrato(JTable tabela, TelaPesquisa tela) {
            this.tabela = tabela;
            this.tela = tela;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            int selecionada = tabela.getSelectedRow();
            if (selecionada == -1) {
                JOptionPane.showMessageDialog(null, "Nenhum registro selecionado");
            } else {
                int id = Integer.parseInt(tabela.getValueAt(selecionada, 0).toString());
                try {
                    contrato = Contrato.buscarPorId(id);
                    if (contrato == null) {
                        JOptionPane.showMessageDialog(null, "Contrato não encontrada, faça a consulta novamente.");
                    } else {
                        alunoSelecionado = contrato.getAluno();
                        txtRA.setText(contrato.getAluno().getRa());
                        lblNomeAluno.setText(contrato.getAluno().getNome());
                        empresaSelecionada = contrato.getEmpresa();
                        txtCNPJEmpresa.setText(CpfCnpjUtil.formatarCpfCnpj(contrato.getEmpresa().getCnpj()));
                        lblNomeEmpresa.setText(contrato.getEmpresa().getNome());
                        txtProtocolo.setText(contrato.getNumProtocolo());
                        SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                        String dataInicio = "";
                        if (contrato.getDataInicio() != null && !contrato.getDataInicio().toString().isEmpty()) {
                            dataInicio = format1.format(contrato.getDataInicio().getTime());
                        }
                        txtDataInicio.setText(dataInicio);

                        String dataFinal = "";
                        if (contrato.getDataTermino() != null && !contrato.getDataTermino().toString().isEmpty()) {
                            dataFinal = format1.format(contrato.getDataTermino().getTime());
                        }
                        txtDataTermino.setText(dataFinal);

                        String dataEntrada = "";
                        if (contrato.getDataEntrada() != null && !contrato.getDataEntrada().toString().isEmpty()) {
                            dataEntrada = format1.format(contrato.getDataEntrada().getTime());
                        }
                        txtDataEntrada.setText(dataEntrada);

                        String dataRescisao = "";
                        if (contrato.getDataRescisao() != null && !contrato.getDataRescisao().toString().isEmpty()) {
                            dataRescisao = format1.format(contrato.getDataRescisao().getTime());
                        }
                        txtDataRescisao.setText(dataRescisao);

                        txtCHDiaria.setValue(contrato.getValorCargaHorariaDiaria());
                        txtCHSemanal.setValue(contrato.getValorCargaHorariaSemanal());
                        txtValorBolsa.setValue(contrato.getValorBolsa());
                        txtAuxTransporte.setValue(contrato.getAuxilioTransporte());
                        txtObservacao.setText(contrato.getObservacao());

                        switch (contrato.getTipo()) {
                            case OBRIGATORIO:
                                cbxTipoContrato.setSelectedIndex(1);
                                break;
                            case NAO_OBRIGATORIO:
                                cbxTipoContrato.setSelectedIndex(2);
                                break;
                            case ATIVIDADE_EXTENSIONISTA:
                                cbxTipoContrato.setSelectedIndex(3);
                                break;
                            case MONITORIA:
                                contrato.setTipo(TipoContrato.MONITORIA);
                                cbxTipoContrato.setSelectedIndex(4);
                                break;
                            case ESCOLA_INTEGRADA:
                                contrato.setTipo(TipoContrato.ESCOLA_INTEGRADA);
                                cbxTipoContrato.setSelectedIndex(5);
                                break;
                            case INICIACAO_CIENTIFICA:
                                contrato.setTipo(TipoContrato.INICIACAO_CIENTIFICA);
                                cbxTipoContrato.setSelectedIndex(6);
                                break;
                            default:
                                cbxTipoContrato.setSelectedIndex(0);
                        }

                        switch (contrato.getSituacaoAtual()) {
                            case CANCELADO:
                                cbxSituacao.setSelectedIndex(1);
                                break;
                            case FINALIZADO:
                                cbxSituacao.setSelectedIndex(2);
                                break;
                            default:
                                cbxSituacao.setSelectedIndex(0);
                        }

                        try {
                            documentos = Contrato.buscarDocumentos(contrato.getId());
                            if ((documentos == null) || (documentos.isEmpty())) {
                                tableModel.setRowCount(0);
                            } else {
                                tableModel.setRowCount(0);
                                for (Documento i : documentos) {
                                    tableModel.addRow(
                                            new String[]{i.getId().toString(), i.getNome()});
                                }
                            }

                        } catch (IOException ex) {
                            Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        SimpleDateFormat curFormater = new SimpleDateFormat("dd/MM/yyyy");
                        String timeStamp = new SimpleDateFormat("dd/MM/yyyy").format(Calendar.getInstance().getTime());
                        Calendar dataAt = null;
                        Date dateObj = null;
                        if (!timeStamp.isEmpty()) {
                            try {
                                dateObj = (Date) curFormater.parse(timeStamp);
                            } catch (Exception ex) {
                                JOptionPane.showMessageDialog(null, "Data inválida");
                            }
                            dataAt = Calendar.getInstance();
                            dataAt.setTime(dateObj);
                        }
                        Calendar dataTermino = contrato.getDataTermino();
                        if ((contrato.getSituacaoAtual() == SituacaoContrato.ANDAMENTO) && (dataAt != null) && (dataTermino != null) && (dataTermino.before(dataAt))) {
                            int i = JOptionPane.showConfirmDialog(null, "Este contrato já atingiu a data de término, deseja encerrá-lo?");
                            if (i == 0) {
                                alteraSituacao(2, "", false);
                            }
                        }

                        validaBotoes(cbxSituacao.getSelectedIndex());
                        tela.setVisible(false);
                    }

                } catch (SQLException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Erro! Favor entrar em contato com o Administrador do sistema.");
                }
            }
        }
    }

    private void txtCNPJEmpresaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtCNPJEmpresaFocusLost
        String cnpj = CpfCnpjUtil.removerFormatacaoCpfCnpj(txtCNPJEmpresa.getText());
        if (!cnpj.isEmpty()) {

            try {
                empresaSelecionada = Empresa.buscarPorCNPJ(cnpj);
                if (empresaSelecionada == null) {
                    JOptionPane.showMessageDialog(null, "Empresa não encontrada");
                    txtCNPJEmpresa.setText("");
                    lblNomeEmpresa.setText("");
                    txtCNPJEmpresa.requestFocus();
                } else {
                    txtCNPJEmpresa.setText(CpfCnpjUtil.formatarCpfCnpj(empresaSelecionada.getCnpj()));
                    lblNomeEmpresa.setText(empresaSelecionada.getNome());
                }

            } catch (SQLException ex) {
                Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(null, "Erro! Favor entrar em contato com o Administrador do sistema.");
            }

        }
    }//GEN-LAST:event_txtCNPJEmpresaFocusLost

    private void btnSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarActionPerformed
        String dateStr = txtDataEntrada.getText();
        Date dateObj;
        SimpleDateFormat curFormater = new SimpleDateFormat("dd/MM/yyyy");
        Calendar dataEntrada = null;
        if (!dateStr.isEmpty()) {
            dateObj = null;
            try {
                dateObj = (Date) curFormater.parse(dateStr);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Data de entrada inválida");
            }
            dataEntrada = Calendar.getInstance();
            dataEntrada.setTime(dateObj);
        }

        dateStr = txtDataInicio.getText();
        Calendar dataInicio = null;
        dateObj = null;
        if (!dateStr.isEmpty()) {
            try {
                dateObj = (Date) curFormater.parse(dateStr);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Data de início inválida");
            }
            dataInicio = Calendar.getInstance();
            dataInicio.setTime(dateObj);
        }

        dateStr = txtDataTermino.getText();
        Calendar dataTermino = null;
        dateObj = null;
        if (!dateStr.isEmpty()) {
            try {
                dateObj = (Date) curFormater.parse(dateStr);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Data de término inválida");
            }
            dataTermino = Calendar.getInstance();
            dataTermino.setTime(dateObj);
        }

        dateStr = txtDataRescisao.getText();
        Calendar dataRescisao = null;
        dateObj = null;
        if (!dateStr.isEmpty()) {
            try {
                dateObj = (Date) curFormater.parse(dateStr);
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(null, "Data de rescisão inválida");
            }
            dataRescisao = Calendar.getInstance();
            dataRescisao.setTime(dateObj);
        }

        if (((dataInicio != null) && (dataTermino == null)) || ((dataInicio == null) && (dataTermino != null))) {
            JOptionPane.showMessageDialog(null, "Informe a data de início e de término.");
            return;
        }

        if ((dataInicio != null) && (dataTermino != null) && (dataTermino.before(dataInicio))) {
            JOptionPane.showMessageDialog(null, "Data de término deve ser igual ou superior à data de início.");
            return;
        }

        contrato.setAluno(alunoSelecionado);
        contrato.setEmpresa(empresaSelecionada);
        contrato.setNumProtocolo(txtProtocolo.getText());
        contrato.setDataEntrada(dataEntrada);
        contrato.setDataInicio(dataInicio);
        contrato.setDataTermino(dataTermino);
        if (!txtValorBolsa.getText().isEmpty()) {
            contrato.setValorBolsa(BigDecimal.valueOf(Double.parseDouble(txtValorBolsa.getText().replace(".", "").replace(",", "."))));
        }
        if (!txtAuxTransporte.getText().isEmpty()) {
            contrato.setAuxilioTransporte(BigDecimal.valueOf(Double.parseDouble(txtAuxTransporte.getText().replace(".", "").replace(",", "."))));
        }
        contrato.setValorCargaHorariaDiaria(BigDecimal.valueOf(Double.parseDouble(txtCHDiaria.getValue().toString())));
        contrato.setValorCargaHorariaSemanal(BigDecimal.valueOf(Double.parseDouble(txtCHSemanal.getValue().toString())));
        contrato.setObservacao(txtObservacao.getText());
        contrato.setIndAlunoContratado("N");

        switch (cbxTipoContrato.getSelectedIndex()) {
            case 2:
                contrato.setTipo(TipoContrato.NAO_OBRIGATORIO);
                break;
            case 3:
                contrato.setTipo(TipoContrato.ATIVIDADE_EXTENSIONISTA);
                break;
            case 4:
                contrato.setTipo(TipoContrato.MONITORIA);
                break;
            case 5:
                contrato.setTipo(TipoContrato.ESCOLA_INTEGRADA);
                break;
            case 6:
                contrato.setTipo(TipoContrato.INICIACAO_CIENTIFICA);
                break;
            default:
                contrato.setTipo(TipoContrato.OBRIGATORIO);
        }

        switch (cbxSituacao.getSelectedIndex()) {
            case 1:
                contrato.setSituacaoAtual(SituacaoContrato.CANCELADO);
                break;
            case 2:
                contrato.setSituacaoAtual(SituacaoContrato.FINALIZADO);
                break;
            default:
                contrato.setSituacaoAtual(SituacaoContrato.ANDAMENTO);
        }
        ContratoHistorico historico = new ContratoHistorico();
        if ((contrato == null) || (contrato.getId() == null)) {
            historico.setContrato(contrato);
            String timeStamp = new SimpleDateFormat("dd/MM/yyyy").format(Calendar.getInstance().getTime());
            Calendar dataAt = null;
            dateObj = null;
            if (!timeStamp.isEmpty()) {
                try {
                    dateObj = (Date) curFormater.parse(timeStamp);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Data de início inválida");
                }
                dataAt = Calendar.getInstance();
                dataAt.setTime(dateObj);
            }
            historico.setData(dataAt);
            historico.setSituacao(SituacaoContrato.ANDAMENTO);
            historico.setObservacao("Situação Inicial");
        }

        try {
            contrato.salvar();
            if ((historico != null) && (historico.getData() != null)) {
                historico.salvar();
            }
            validaBotoes(cbxSituacao.getSelectedIndex());
            JOptionPane.showMessageDialog(null, "Informações salvas com sucesso!");
        } catch (ContratoInvalidoException ex) {
            JOptionPane.showMessageDialog(null, ex);
            Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar contrato no banco de dados");
            Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao salvar contrato no banco de dados");
            Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_btnSalvarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        String data = JOptionPane.showInputDialog("Informe a data de rescisão: (dd/mm/yyyy)");
        if (data.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Informe a data de rescisão!");
        } else {
            alteraSituacao(1, data, true);
        }
    }//GEN-LAST:event_btnCancelarActionPerformed
    private void alteraSituacao(int tipo, String dataRescisao, Boolean pergunta) {
        if ((contrato == null) || (contrato.getId() == null)) {
            JOptionPane.showMessageDialog(this, "Nenhum contrato selecionado!");
        } else if (cbxSituacao.getSelectedIndex() == tipo) {
            JOptionPane.showMessageDialog(this, "Contrato já nesta situação!");
        } else {
            int i = JOptionPane.showConfirmDialog(null, "Confirma a alteração da situação do contrato?");
            if (i == 0) {
                cbxSituacao.setSelectedIndex(tipo);
                switch (cbxSituacao.getSelectedIndex()) {
                    case 1:
                        contrato.setSituacaoAtual(SituacaoContrato.CANCELADO);
                        break;
                    case 2:
                        contrato.setSituacaoAtual(SituacaoContrato.FINALIZADO);
                        break;
                    default:
                        contrato.setSituacaoAtual(SituacaoContrato.ANDAMENTO);
                }
                SimpleDateFormat curFormater = new SimpleDateFormat("dd/MM/yyyy");
                Calendar dataResc = null;
                Date dateObj = null;
                if (!dataRescisao.isEmpty()) {
                    try {
                        dateObj = (Date) curFormater.parse(dataRescisao);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Data de rescisão inválida");
                    }
                    dataResc = Calendar.getInstance();
                    dataResc.setTime(dateObj);
                }
                contrato.setDataRescisao(dataResc);

                ContratoHistorico historico = new ContratoHistorico();
                historico.setContrato(contrato);
                String timeStamp = new SimpleDateFormat("dd/MM/yyyy").format(Calendar.getInstance().getTime());
                Calendar dataAt = null;
                dateObj = null;
                if (!timeStamp.isEmpty()) {
                    try {
                        dateObj = (Date) curFormater.parse(timeStamp);
                    } catch (Exception ex) {
                        JOptionPane.showMessageDialog(null, "Data inválida");
                    }
                    dataAt = Calendar.getInstance();
                    dataAt.setTime(dateObj);
                }
                historico.setData(dataAt);
                historico.setSituacao(contrato.getSituacaoAtual());
                String obs = "";
                if (pergunta) {
                    obs = JOptionPane.showInputDialog("Se desejar, informe as observações da alteração: ");
                }
                historico.setObservacao(obs);

                try {
                    contrato.salvar();
                    txtDataRescisao.setText(dataRescisao);
                    historico.salvar();
                    validaBotoes(cbxSituacao.getSelectedIndex());
                    JOptionPane.showMessageDialog(null, "Alteração efetuada com sucesso!");
                } catch (ContratoInvalidoException ex) {
                    JOptionPane.showMessageDialog(null, ex);
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Erro ao alterar contrato no banco de dados");
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }
    private void btnReativarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReativarActionPerformed
        alteraSituacao(0, "", true);
    }//GEN-LAST:event_btnReativarActionPerformed

    private void txtDataRescisaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataRescisaoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataRescisaoActionPerformed

    private void txtDataTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataTermoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataTermoActionPerformed

    private void txtDataInicioTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataInicioTermoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataInicioTermoActionPerformed

    private void txtDataTerminoTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDataTerminoTermoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDataTerminoTermoActionPerformed

    private void btnLimparTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparTermoActionPerformed
        txtDataInicioTermo.setText("");
        txtDataTerminoTermo.setText("");
        txtDataTermo.setText("");
        txtObservacaoTermo.setText("");
        inicializarTabelaAnexoTermo();
        termo = new TermoAditivo();        
        txtDataTermo.requestFocus();
    }//GEN-LAST:event_btnLimparTermoActionPerformed

    private void btnSalvarTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalvarTermoActionPerformed
        if ((contrato == null) || (contrato.getId() == null)) {
            JOptionPane.showMessageDialog(this, "Nenhum contrato selecionado!");
        } else {
            SimpleDateFormat curFormater = new SimpleDateFormat("dd/MM/yyyy");
            Date dateObj;
            String dateStr;

            dateStr = txtDataInicioTermo.getText();
            Calendar dataInicio = null;
            if (!dateStr.isEmpty()) {
                dateObj = null;
                try {
                    dateObj = (Date) curFormater.parse(dateStr);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Data de entrada inválida");
                }
                dataInicio = Calendar.getInstance();
                dataInicio.setTime(dateObj);
            }

            dateStr = txtDataTerminoTermo.getText();
            Calendar dataTermino = null;
            if (!dateStr.isEmpty()) {
                dateObj = null;
                try {
                    dateObj = (Date) curFormater.parse(dateStr);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "Data de início inválida");
                }
                dataTermino = Calendar.getInstance();
                dataTermino.setTime(dateObj);
            }

            dateStr = txtDataTermo.getText();
            Calendar dataTermo = null;
            if (!dateStr.isEmpty()) {
                dateObj = null;
                try {
                    dateObj = (Date) curFormater.parse(dateStr);
                } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null, "Data de término inválida");
                }
                dataTermo = Calendar.getInstance();
                dataTermo.setTime(dateObj);
            }

            termo.setContrato(contrato);
            termo.setData(dataTermo);
            termo.setDataInicio(dataInicio);
            termo.setDataTemino(dataTermino);
            termo.setObservacao(txtObservacaoTermo.getText());

            try {
                termo.salvar();
                tableModelTermo.addRow(
                        new String[]{termo.getId().toString(), txtDataTermo.getText(), txtDataInicioTermo.getText(), txtDataTerminoTermo.getText()});
                JOptionPane.showMessageDialog(null, "Informações salvas com sucesso!");
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Erro ao salvar contrato no banco de dados");
                Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSalvarTermoActionPerformed

    private void btnBaixarAnexoTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBaixarAnexoTermoActionPerformed
        int selecionada = tblResultadoAnexoTermo.getSelectedRow();
        if (selecionada == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum registro selecionado");
        } else {
            JFileChooser tela = new JFileChooser();
            tela.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            int retorno = tela.showSaveDialog(this);

            if (retorno == JFileChooser.APPROVE_OPTION) {
                File arquivo = tela.getSelectedFile();
                //JOptionPane.showMessageDialog(null, arquivo.getAbsolutePath() + "\\" + tblResultadoAnexo.getValueAt(selecionada, 1).toString());
                int id = Integer.parseInt(tblResultadoAnexoTermo.getValueAt(selecionada, 0).toString());
                try {
                    Contrato.baixarDocumento(id, arquivo.getAbsolutePath() + "\\" + tblResultadoAnexoTermo.getValueAt(selecionada, 1).toString());
                } catch (SQLException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Erro ao baixar o arquivo do banco de dados! Favor entrar em contato com o Administrador do sistema.");
                } catch (IOException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Erro localizar o caminho do arquivo!");
                }
            }
        }
    }//GEN-LAST:event_btnBaixarAnexoTermoActionPerformed

    private void btnExcluirTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirTermoActionPerformed

        int selecionada = tblResultadoAditivo.getSelectedRow();
        if (selecionada == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum registro selecionado");
        } else {
            int i = JOptionPane.showConfirmDialog(null, "Confirma a exclusão do termo aditivo?");
            if (i == 0) {
                int id = Integer.parseInt(tblResultadoAditivo.getValueAt(selecionada, 0).toString());
                try {
                    TermoAditivo.excluir(id);
                    tableModelTermo.removeRow(selecionada);
                    btnLimparTermoActionPerformed(null);
                } catch (TermoAditivoInvalidoException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(null, "Erro ao excluir termo do banco de dados.");
                }
            }
        }
    }//GEN-LAST:event_btnExcluirTermoActionPerformed

    public void inicializarTermos() {
        try {
            termos = TermoAditivo.buscarPorIdContrato(contrato.getId());
            if ((termos == null) || (termos.isEmpty())) {
                tableModelTermo.setRowCount(0);
            } else {
                tableModelTermo.setRowCount(0);
                for (TermoAditivo i : termos) {
                    SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                    String dataInicio = "";
                    if (i.getDataInicio() != null && !i.getDataInicio().toString().isEmpty()) {
                        dataInicio = format1.format(i.getDataInicio().getTime());
                    }

                    String dataFinal = "";
                    if (i.getDataTemino() != null && !i.getDataTemino().toString().isEmpty()) {
                        dataFinal = format1.format(i.getDataTemino().getTime());
                    }

                    String dataTermo = "";
                    if (i.getData() != null && !i.getData().toString().isEmpty()) {
                        dataTermo = format1.format(i.getData().getTime());
                    }

                    tableModelTermo.addRow(
                            new String[]{i.getId().toString(), dataTermo, dataInicio, dataFinal});
                }
            }
        } catch (SQLException ex) {
            Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(null, "Erro localizar termos do contrato!");
        }

    }

    private void btnSelecionarTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelecionarTermoActionPerformed
        int selecionada = tblResultadoAditivo.getSelectedRow();
        if (selecionada == -1) {
            JOptionPane.showMessageDialog(null, "Nenhum registro selecionado");
        } else {
            int id = Integer.parseInt(tblResultadoAditivo.getValueAt(selecionada, 0).toString());
            try {
                termo = TermoAditivo.buscarPorId(id);
                if (termo == null) {
                    JOptionPane.showMessageDialog(null, "Aluno não encontrado, faça a consulta novamente.");
                } else {
                    inicializarTermos();
                    SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                    String dataInicio = "";
                    if (termo.getDataInicio() != null && !termo.getDataInicio().toString().isEmpty()) {
                        dataInicio = format1.format(termo.getDataInicio().getTime());
                    }
                    txtDataInicioTermo.setText(dataInicio);

                    String dataTermino = "";
                    if (termo.getDataTemino() != null && !termo.getDataTemino().toString().isEmpty()) {
                        dataTermino = format1.format(termo.getDataTemino().getTime());
                    }
                    txtDataTerminoTermo.setText(dataTermino);

                    String dataTermo = "";
                    if (termo.getData() != null && !termo.getData().toString().isEmpty()) {
                        dataTermo = format1.format(termo.getData().getTime());
                    }
                    txtDataTermo.setText(dataTermo);

                    txtObservacaoTermo.setText(termo.getObservacao());

                    try {
                        documentos = TermoAditivo.buscarDocumentos(termo.getId());
                        if ((documentos == null) || (documentos.isEmpty())) {
                            tableModelAnexoTermo.setRowCount(0);
                        } else {
                            tableModelAnexoTermo.setRowCount(0);
                            for (Documento i : documentos) {
                                tableModelAnexoTermo.addRow(
                                        new String[]{i.getId().toString(), i.getNome()});
                            }
                        }

                    } catch (IOException ex) {
                        Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    tabPanel.setSelectedIndex(1);
                    txtDataTermo.requestFocus();

                }
            } catch (SQLException ex) {
                Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnSelecionarTermoActionPerformed

    private void btnAddAnexoTermoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddAnexoTermoActionPerformed
        if ((termo == null) || (termo.getId() == null)) {
            JOptionPane.showMessageDialog(this, "Nenhum termo selecionado!");
        } else {
            JFileChooser tela = new JFileChooser();
            int retorno = tela.showOpenDialog(this);

            if (retorno == JFileChooser.APPROVE_OPTION) {
                File arquivo = tela.getSelectedFile();
                //JOptionPane.showMessageDialog(null, arquivo.getAbsolutePath());
                try {
                    int id = termo.anexar(arquivo.getAbsolutePath());
                    tableModelAnexoTermo.addRow(
                            new String[]{String.valueOf(id), arquivo.getName()});
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Não foi possível encontrar o arquivo!");
                } catch (SQLException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "Erro ao inserir o arquivo no banco de dados!");
                } catch (IOException ex) {
                    Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

        }
    }//GEN-LAST:event_btnAddAnexoTermoActionPerformed

    private void tabPanelGeralStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tabPanelGeralStateChanged
        int index = tabPanelGeral.getSelectedIndex();
        switch (index) {
            case 1:
                inicializarTabelaHistorico();
                if ((contrato == null) || (contrato.getId() == null)) {
                    JOptionPane.showMessageDialog(this, "Nenhum contrato selecionado!");
                } else {
                    List<ContratoHistorico> x;
                    try {
                        x = ContratoHistorico.buscarPorIdContrato(contrato.getId());
                        if (x != null) {
                            for (ContratoHistorico i : x) {
                                String data = "";
                                SimpleDateFormat format1 = new SimpleDateFormat("dd/MM/yyyy");
                                if (i.getData() != null && !i.getData().toString().isEmpty()) {
                                    data = format1.format(i.getData().getTime());
                                }
                                String situacao;
                                switch (i.getSituacao()) {
                                    case CANCELADO:
                                        situacao = "Cancelado";
                                        break;
                                    case FINALIZADO:
                                        situacao = "Finalizado";
                                        break;
                                    default:
                                        situacao = "Em Andamento";
                                }

                                tableModelHistorico.addRow(
                                        new String[]{data, situacao, i.getObservacao()});
                            }
                        }
                    } catch (SQLException ex) {
                        Logger.getLogger(TelaContrato.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
            case 2:
                inicializarTabelaTermo();
                inicializarTabelaAnexoTermo();
                btnLimparTermoActionPerformed(null);
                tabPanel.setSelectedIndex(0);
                if ((contrato == null) || (contrato.getId() == null)) {
                    JOptionPane.showMessageDialog(this, "Nenhum contrato selecionado!");                    
                } else {
                    if (this.cbxSituacao.getSelectedIndex() == 0) {
                        btnAddAnexoTermo.setEnabled(true);
                        btnExcluirTermo.setEnabled(true);
                        btnLimparTermo.setEnabled(true);
                        btnSalvarTermo.setEnabled(true);
                    } else {
                        btnAddAnexoTermo.setEnabled(false);
                        btnExcluirTermo.setEnabled(false);
                        btnLimparTermo.setEnabled(false);
                        btnSalvarTermo.setEnabled(false);
                    }
                    termo = new TermoAditivo();
                    inicializarTermos();
                }

                break;
        }
    }//GEN-LAST:event_tabPanelGeralStateChanged

    private void txtValorBolsaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtValorBolsaFocusLost
        if (txtValorBolsa.getText().isEmpty())
            txtValorBolsa.setText("0,00");
    }//GEN-LAST:event_txtValorBolsaFocusLost

    private void txtAuxTransporteFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtAuxTransporteFocusLost
        if (txtAuxTransporte.getText().isEmpty())
            txtAuxTransporte.setText("0,00");
    }//GEN-LAST:event_txtAuxTransporteFocusLost

    private void validaBotoes(int situacao) {
        switch (situacao) {
            case 0:
                btnReativar.setEnabled(false);
                btnCancelar.setEnabled(true);
                btnSalvar.setEnabled(true);
                btnAddAnexo.setEnabled(true);
                break;
            case 1:
                btnReativar.setEnabled(true);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnAddAnexo.setEnabled(false);
                break;
            case 2:
                btnReativar.setEnabled(true);
                btnCancelar.setEnabled(false);
                btnSalvar.setEnabled(false);
                btnAddAnexo.setEnabled(false);
                break;
            default:
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TelaContrato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TelaContrato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TelaContrato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TelaContrato.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                TelaContrato dialog = new TelaContrato(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane JScroll1;
    private javax.swing.JButton btnAddAnexo;
    private javax.swing.JButton btnAddAnexoTermo;
    private javax.swing.JButton btnBaixarAnexo;
    private javax.swing.JButton btnBaixarAnexoTermo;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnConsultarContrato;
    private javax.swing.JButton btnExcluirTermo;
    private javax.swing.JButton btnLimparContrato;
    private javax.swing.JButton btnLimparTermo;
    private javax.swing.JButton btnPesquisaAluno;
    private javax.swing.JButton btnPesquisaEmpresa;
    private javax.swing.JButton btnReativar;
    private javax.swing.JButton btnSalvar;
    private javax.swing.JButton btnSalvarTermo;
    private javax.swing.JButton btnSelecionarTermo;
    private javax.swing.JComboBox<String> cbxSituacao;
    private javax.swing.JComboBox<String> cbxTipoContrato;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JLabel lblAuxTranporte;
    private javax.swing.JLabel lblBolsa;
    private javax.swing.JLabel lblCHDiaria;
    private javax.swing.JLabel lblCHSemanal;
    private javax.swing.JLabel lblCNPJ;
    private javax.swing.JLabel lblNomeAluno;
    private javax.swing.JLabel lblNomeEmpresa;
    private javax.swing.JLabel lblRA;
    private javax.swing.JTabbedPane tabPanel;
    private javax.swing.JTabbedPane tabPanelGeral;
    private javax.swing.JPanel tblDados;
    private javax.swing.JPanel tblLista;
    private javax.swing.JTable tblResultadoAditivo;
    private javax.swing.JTable tblResultadoAnexo;
    private javax.swing.JTable tblResultadoAnexoTermo;
    private javax.swing.JTable tblResultadoHistorico;
    private javax.swing.JFormattedTextField txtAuxTransporte;
    private javax.swing.JSpinner txtCHDiaria;
    private javax.swing.JSpinner txtCHSemanal;
    private javax.swing.JTextField txtCNPJEmpresa;
    private javax.swing.JFormattedTextField txtDataEntrada;
    private javax.swing.JFormattedTextField txtDataInicio;
    private javax.swing.JFormattedTextField txtDataInicioTermo;
    private javax.swing.JFormattedTextField txtDataRescisao;
    private javax.swing.JFormattedTextField txtDataTermino;
    private javax.swing.JFormattedTextField txtDataTerminoTermo;
    private javax.swing.JFormattedTextField txtDataTermo;
    private javax.swing.JTextArea txtObservacao;
    private javax.swing.JTextArea txtObservacaoTermo;
    private javax.swing.JFormattedTextField txtProtocolo;
    private javax.swing.JTextField txtRA;
    private javax.swing.JFormattedTextField txtValorBolsa;
    // End of variables declaration//GEN-END:variables
}
